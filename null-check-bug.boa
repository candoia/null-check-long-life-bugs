out: output sum[string] of int;
p: Project = input;
isfixing := false;
bugfix: Issue;
nullFixing := false;
count := 0;
files: map[string] of ChangedFile;

getLongestBug := function(logging: string, issueRecord: set of Issue): Issue{
    lst := getAsArray(issueRecord);
    longestIssue: Issue;
    foreach(i: int; def(lst[i])){
      issue: Issue = lst[i];
      if(strfind(issue.number, logging) > -1){
        if(issue.has_closed_date){
          if(!def(longestIssue)){
            longestIssue = issue;
          }else{
            if((longestIssue.closed_date - longestIssue.created_date) < (issue.closed_date - issue.created_date)){
             longestIssue = issue;
            }
          }
        }
      }
    }
    return longestIssue;
};

issues: set of Issue;
visit(p, visitor {
    before node: Issue -> {
          add(issues, node);
        }
});
visit(p, visitor {
	before node: Revision -> {
        comment := node.log;
        isfixing = isfixingrevision(comment);
        if(isfixing){
          bugfix= getLongestBug(comment, issues);
        }
    }
	before node: ChangedFile -> {
		if (def(bugfix) && haskey(files, node.name)) {
			count = 0;
			visit(getast(files[node.name]));
			last := count;
			count = 0;
			visit(getast(node));
			if (count > last){
              nullFixing = true;
            }
		}
		if (node.change == ChangeKind.DELETED)
			remove(files, node.name);
		else
			files[node.name] = node;
		stop;
	}
	after node : Revision -> {
      if(nullFixing){
	      out[bugfix.title] << diffBetweenTime(bugfix.closed_date, bugfix.created_date)/ ((60 * 60 * 1000000 * 24 * 7));
      }
	  nullFixing = false;
	}
	before node: Statement ->
		if (node.kind == StatementKind.IF)
			visit(node.expression, visitor {
				before node: Expression ->
					if (node.kind == ExpressionKind.EQ || node.kind == ExpressionKind.NEQ)
						exists (i: int; isliteral(node.expressions[i], "null"))
							count++;
			});
});
